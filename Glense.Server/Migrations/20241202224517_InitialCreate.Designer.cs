// <auto-generated />
using System;
using Glense.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Glense.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241202224517_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Glense.Server.Category", b =>
                {
                    b.Property<int>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryID"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Glense.Server.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentId"));

                    b.Property<int>("commentLikes")
                        .HasColumnType("int");

                    b.Property<string>("commentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("parentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("videoId")
                        .HasColumnType("int");

                    b.HasKey("commentId");

                    b.HasIndex("parentCommentId");

                    b.HasIndex("userId");

                    b.HasIndex("videoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Glense.Server.CommentLikes", b =>
                {
                    b.Property<int>("commentId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("commentId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("Glense.Server.Conversation", b =>
                {
                    b.Property<int>("conversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("conversationId"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("user1Id")
                        .HasColumnType("int");

                    b.Property<int>("user2Id")
                        .HasColumnType("int");

                    b.HasKey("conversationId");

                    b.HasIndex("user1Id");

                    b.HasIndex("user2Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Glense.Server.Donation", b =>
                {
                    b.Property<int>("donatorId")
                        .HasColumnType("int");

                    b.Property<int>("recipientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("donatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.HasKey("donatorId", "recipientId", "donatedAt");

                    b.HasIndex("recipientId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Glense.Server.Message", b =>
                {
                    b.Property<int>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("messageId"));

                    b.Property<int>("conversationId")
                        .HasColumnType("int");

                    b.Property<bool>("seen")
                        .HasColumnType("bit");

                    b.Property<int>("senderuserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("sentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("messageId");

                    b.HasIndex("conversationId");

                    b.HasIndex("senderuserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Glense.Server.Subscription", b =>
                {
                    b.Property<int>("subscriberId")
                        .HasColumnType("int");

                    b.Property<int>("subscribedToId")
                        .HasColumnType("int");

                    b.HasKey("subscriberId", "subscribedToId");

                    b.HasIndex("subscribedToId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Glense.Server.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwordSHA256")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilePictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Glense.Server.Video", b =>
                {
                    b.Property<int>("videoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("videoID"));

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dislikeCount")
                        .HasColumnType("int");

                    b.Property<int>("likeCount")
                        .HasColumnType("int");

                    b.Property<string>("thumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("uploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("uploaderuserId")
                        .HasColumnType("int");

                    b.Property<string>("videoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("viewCount")
                        .HasColumnType("int");

                    b.HasKey("videoID");

                    b.HasIndex("categoryId");

                    b.HasIndex("uploaderuserId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Glense.Server.VideoLikes", b =>
                {
                    b.Property<int>("videoId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<bool>("isLiked")
                        .HasColumnType("bit");

                    b.HasKey("videoId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("VideoLikes");
                });

            modelBuilder.Entity("Glense.Server.Comment", b =>
                {
                    b.HasOne("Glense.Server.Comment", "parentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("parentCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.User", "user")
                        .WithMany("Comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.Video", "video")
                        .WithMany("Comments")
                        .HasForeignKey("videoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parentComment");

                    b.Navigation("user");

                    b.Navigation("video");
                });

            modelBuilder.Entity("Glense.Server.CommentLikes", b =>
                {
                    b.HasOne("Glense.Server.Comment", "comment")
                        .WithMany("CLikes")
                        .HasForeignKey("commentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.User", "user")
                        .WithMany("CLikes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comment");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Glense.Server.Conversation", b =>
                {
                    b.HasOne("Glense.Server.User", "user1")
                        .WithMany("ConversationsStarted")
                        .HasForeignKey("user1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.User", "user2")
                        .WithMany("ConversationsInvited")
                        .HasForeignKey("user2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user1");

                    b.Navigation("user2");
                });

            modelBuilder.Entity("Glense.Server.Donation", b =>
                {
                    b.HasOne("Glense.Server.User", "recipient")
                        .WithMany("Donations")
                        .HasForeignKey("recipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("recipient");
                });

            modelBuilder.Entity("Glense.Server.Message", b =>
                {
                    b.HasOne("Glense.Server.Conversation", "conversation")
                        .WithMany("Messages")
                        .HasForeignKey("conversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.User", "sender")
                        .WithMany()
                        .HasForeignKey("senderuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conversation");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("Glense.Server.Subscription", b =>
                {
                    b.HasOne("Glense.Server.User", "subscribedTo")
                        .WithMany("Subscriptions")
                        .HasForeignKey("subscribedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.User", "subscriber")
                        .WithMany("Subscribers")
                        .HasForeignKey("subscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subscribedTo");

                    b.Navigation("subscriber");
                });

            modelBuilder.Entity("Glense.Server.Video", b =>
                {
                    b.HasOne("Glense.Server.Category", "category")
                        .WithMany("Videos")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.User", "uploader")
                        .WithMany()
                        .HasForeignKey("uploaderuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("uploader");
                });

            modelBuilder.Entity("Glense.Server.VideoLikes", b =>
                {
                    b.HasOne("Glense.Server.User", "user")
                        .WithMany("VLikes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glense.Server.Video", "video")
                        .WithMany("VLikes")
                        .HasForeignKey("videoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");

                    b.Navigation("video");
                });

            modelBuilder.Entity("Glense.Server.Category", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Glense.Server.Comment", b =>
                {
                    b.Navigation("CLikes");

                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("Glense.Server.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Glense.Server.User", b =>
                {
                    b.Navigation("CLikes");

                    b.Navigation("Comments");

                    b.Navigation("ConversationsInvited");

                    b.Navigation("ConversationsStarted");

                    b.Navigation("Donations");

                    b.Navigation("Subscribers");

                    b.Navigation("Subscriptions");

                    b.Navigation("VLikes");
                });

            modelBuilder.Entity("Glense.Server.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("VLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
